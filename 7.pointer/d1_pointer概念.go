package main

import "fmt"

/*
	指针
	1.概念：存储了另一个变量的地址，
	2.常用的指针类型
		*int *int64 *string *array *struct
	3.语法
		创建指针
			var 变量名称 *指针类型  》 此时的指针变量并未指向任何地址，不能直接使用
			new(指针类型)  》 返回指针，该指针已经指向一个内存地址，可以直接使用
	4.应用场景
		通过指针可以直接修改值类型数据的值，而不产生新的变量

	注意：
		指针只能指向该类型的变量的内存地址
		指针变量一般用p开头
*/

func main() {
	// 创建方法1
	var p1 *int
	i1 := 10
	p1 = &i1
	fmt.Printf("变量p1 类型：%T, 指针变量自身的地址：%p, 值：%v, 指向的值: %v\n", p1, &p1, p1, *p1)

	// 创建方式2
	p2 := new(int)
	*p2 = 20 // 通过指针来操作值
	fmt.Printf("变量p2 类型：%T, 指针变量自身的地址：%p, 值：%v, 指向的值: %v\n", p2, &p2, p2, *p2)

	// 创建指针的指针
	// p3 存储的地址是p2的地址
	var p3 **int
	p3 = &p2
	fmt.Printf("变量p3 类型：%T, 指针变量自身的地址：%p, 值：%v, 指向的值: %v\n", p3, &p3, p3, *p3)

}
